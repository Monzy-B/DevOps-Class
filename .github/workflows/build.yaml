# name: Build and Deploy

# on:
#   push:
#     branches: [ "patch-1" ]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v4

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1


#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ./Terraform

#       - name: Terraform Plan
#         run: terraform plan -var="ec2_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
#         working-directory: ./Terraform

#       - name: Terraform Apply
#         run: terraform apply -auto-approve -var="ec2_public_key=${{ secrets.SSH_KEY }}"
#         working-directory: ./Terraform

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v2

#       - name: Build, tag, and push Docker image
#         run: |
#           IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/todo-app:latest
#           echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
#           docker build -t $IMAGE_URI -f ./todo-app-frontend/Dockerfile ./todo-app-frontend
#           docker push $IMAGE_URI



#       - name: Get instance IP
#         id: ip
#         run: |
#           cd Terraform
#           echo "EC2_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV

#       - name: SSH into EC2 and run container
#         uses: appleboy/ssh-action@v1.2.0
#         with:
#           host: ${{ env.EC2_IP }}
#           username: ubuntu
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             REGION="us-east-1"
#             aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin 058264190206.dkr.ecr.$REGION.amazonaws.com
#             docker pull ${{ env.IMAGE_URI }}
#             docker stop myapp || true
#             docker rm myapp || true
#             docker run -d -p 5000:5000 --name myapp ${{ env.IMAGE_URI }}
